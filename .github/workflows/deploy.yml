name: Deploy to DigitalOcean

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup and install frontend dependencies
      - name: Setup Node.js for frontend
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install frontend dependencies
        run: |
          cd frontend
          npm install

      - name: Fix react-scripts permissions
        run: chmod +x ./frontend/node_modules/.bin/react-scripts

      - name: Build frontend
        run: |
          cd frontend
          npm run build

      # Setup and install backend dependencies
      - name: Setup Node.js for backend
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        run: |
          cd backend
          npm install

      # Deploy backend folder to server
      - name: Deploy backend via SSH
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "backend/"
          target: "/root/gnr/backend"
          strip_components: 1

      # Deploy frontend build folder to server
      - name: Deploy frontend build via SSH
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "frontend/build/"
          target: "/var/www/html"
          strip_components: 1

      # Setup admin user and start backend server
      - name: Setup admin and start server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Create necessary directories
            sudo mkdir -p /var/www/html
            sudo mkdir -p /root/gnr/backend
            
            # Set proper permissions
            sudo chown -R $USER:$USER /var/www/html
            sudo chmod -R 755 /var/www/html
            
            cd /root/gnr/backend
            npm install

            # Create .env file for backend
            cat > .env << EOL
            MONGODB_URI=mongodb+srv://Karyanastore:Karyanastore123@cluster0.izvxlqs.mongodb.net/?retryWrites=true&w=majority&appName=Cluster0
            PORT=5050
            NODE_ENV=production
            JWT_SECRET=mySuperSecretKey123!
            EOL

            # Stop PM2 processes only if they exist
            for PROC in api my-backend restaurant-api; do
              pm2 describe "$PROC" > /dev/null 2>&1 && pm2 delete "$PROC" --silent || true
            done

            # Run admin setup script
            node update-admin-production.js

            # Start the server
            pm2 start server.js --name api
            pm2 save

            # Check admin user status
            node check-admin.js

      # Configure nginx/apache
      - name: Configure web server
        uses: appleboy/ssh-action@v0.1.8
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            # Check if nginx is installed
            if command -v nginx &> /dev/null; then
              echo "Configuring Nginx..."
              
              # Create nginx configuration
              sudo tee /etc/nginx/sites-available/gnrcontrol << 'EOF'
            server {
                listen 80;
                server_name gnrcontrol.com www.gnrcontrol.com;
                root /var/www/html;
                index index.html;

                location / {
                    try_files $uri $uri/ /index.html;
                }

                location /api {
                    proxy_pass http://localhost:5050;
                    proxy_http_version 1.1;
                    proxy_set_header Upgrade $http_upgrade;
                    proxy_set_header Connection 'upgrade';
                    proxy_set_header Host $host;
                    proxy_set_header X-Real-IP $remote_addr;
                    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                    proxy_set_header X-Forwarded-Proto $scheme;
                    proxy_cache_bypass $http_upgrade;
                }
            }
            EOF

              # Enable the site
              sudo ln -sf /etc/nginx/sites-available/gnrcontrol /etc/nginx/sites-enabled/
              sudo rm -f /etc/nginx/sites-enabled/default
              sudo nginx -t
              sudo systemctl reload nginx
              
              echo "Nginx configured successfully"
            else
              # Check if apache is installed
              if command -v apache2 &> /dev/null; then
                echo "Configuring Apache..."
                
                # Create apache configuration
                sudo tee /etc/apache2/sites-available/gnrcontrol.conf << 'EOF'
            <VirtualHost *:80>
                DocumentRoot /var/www/html
                ServerName gnrcontrol.com
                ServerAlias www.gnrcontrol.com
                
                <Directory /var/www/html>
                    AllowOverride All
                    Require all granted
                </Directory>

                ProxyPreserveHost On
                ProxyPass /api http://localhost:5050
                ProxyPassReverse /api http://localhost:5050
            </VirtualHost>
            EOF

                # Enable required modules
                sudo a2enmod proxy
                sudo a2enmod proxy_http
                sudo a2enmod rewrite
                
                # Enable the site
                sudo a2ensite gnrcontrol
                sudo a2dissite 000-default
                sudo systemctl reload apache2
                
                echo "Apache configured successfully"
              else
                echo "No web server (nginx/apache) found. Please install one first."
                exit 1
              fi
            fi

            # Create .htaccess for SPA routing
            cat > /var/www/html/.htaccess << 'EOF'
            RewriteEngine On
            RewriteBase /
            RewriteRule ^index\.html$ - [L]
            RewriteCond %{REQUEST_FILENAME} !-f
            RewriteCond %{REQUEST_FILENAME} !-d
            RewriteCond %{REQUEST_FILENAME} !-l
            RewriteRule . /index.html [L]
            EOF

            # Set final permissions
            sudo chown -R www-data:www-data /var/www/html
            sudo chmod -R 755 /var/www/html
            
            echo "Web server configuration completed successfully"
