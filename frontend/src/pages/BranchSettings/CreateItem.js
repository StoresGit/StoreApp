import React, { useState, useEffect, useCallback } from 'react';
import axios from 'axios';
import backend_url from '../../config/config';

const CreateItem = () => {
  const [formData, setFormData] = useState({
    itemCode: '', // This will be auto-generated by the system
    itemName: '',
    itemCategory: '',
    subCategory: '', // Added sub-category field
    unit: '',
    assignBranch: [],
    assignSection: '', // Changed from array to single value
    assignBrand: '' // Added assign brand field
  });

  const [categories, setCategories] = useState([]);
  const [subCategories, setSubCategories] = useState([]); // Global sub-categories for form
  const [itemSubCategories] = useState({}); // Item-specific sub-categories for editing
  const [units, setUnits] = useState([]);
  const [branches, setBranches] = useState([]);
  const [sections, setSections] = useState([]);
  const [filteredSections, setFilteredSections] = useState([]);
  const [loading, setLoading] = useState(true);
  const [items, setItems] = useState([]); // Added items state
  const [itemsLoading, setItemsLoading] = useState(true); // Added items loading state
  const [brands, setBrands] = useState([]); // Added brands state
  const [editingItem, setEditingItem] = useState(null); // Add editing state
  const [editFormData, setEditFormData] = useState({}); // Add edit form data
  

  // Fetch items
  const fetchItems = useCallback(async () => {
    try {
      setItemsLoading(true);
      const token = localStorage.getItem('token');
      const headers = { Authorization: `Bearer ${token}` };
      
      const response = await axios.get(`${backend_url}/items`, { headers });
      setItems(response.data || []);
    } catch (error) {
      console.error('Error fetching items:', error);
      setItems([]);
    } finally {
      setItemsLoading(false);
    }
  }, []);

  const fetchData = async () => {
    try {
      const token = localStorage.getItem('token');
      const headers = { Authorization: `Bearer ${token}` };

      const [categoriesRes, unitsRes, branchesRes, sectionsRes, brandsRes] = await Promise.all([
        axios.get(`${backend_url}/item-categories`, { headers }),
        axios.get(`${backend_url}/units/branch`, { headers }), // Changed to fetch only branch units
        axios.get(`${backend_url}/branch`, { headers }),
        axios.get(`${backend_url}/sections`, { headers }),
        axios.get(`${backend_url}/brand`, { headers }) // Added brands API call
      ]);

      setCategories(categoriesRes.data);
      setUnits(unitsRes.data);
      setBranches(branchesRes.data);
      setSections(sectionsRes.data);
      setBrands(brandsRes.data); // Set brands data
    } catch (error) {
      console.error('Error fetching data:', error);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchData();
  }, []);

  useEffect(() => {
    fetchItems();
  }, [fetchItems]);

  // Filter sections when branch changes
  useEffect(() => {
    const currentAssignBranch = editingItem ? editFormData.assignBranch : formData.assignBranch;
    
    console.log('Section filtering - editingItem:', editingItem);
    console.log('Section filtering - currentAssignBranch:', currentAssignBranch);
    console.log('Section filtering - all sections:', sections);
    
    if (!currentAssignBranch || currentAssignBranch.length === 0) {
      // If no branches selected, clear sections and section selection
      console.log('No branches selected, clearing sections');
      setFilteredSections([]);
      if (editingItem) {
        setEditFormData(prev => ({ ...prev, assignSection: '' }));
      } else {
        setFormData(prev => ({ ...prev, assignSection: '' }));
      }
    } else {
      // Filter sections based on selected branches - only show sections that belong to selected branches
      const branchIds = currentAssignBranch;
      console.log('Filtering sections for branch IDs:', branchIds);
      
      const filtered = sections.filter(section => {
        // Check if section has a branch and if that branch is in the selected branches
        if (!section.branch) {
          console.log('Section has no branch:', section.name);
          return false;
        }
        
        // Handle both populated and unpopulated branch references
        const sectionBranchId = section.branch._id || section.branch;
        const isMatch = branchIds.includes(sectionBranchId);
        console.log(`Section ${section.name} branch ID: ${sectionBranchId}, matches: ${isMatch}`);
        return isMatch;
      });
      
      console.log('Filtered sections:', filtered);
      setFilteredSections(filtered);
      
      // Clear section selection if current section is not available for selected branches
      const currentSection = editingItem ? editFormData.assignSection : formData.assignSection;
      if (currentSection && !filtered.find(s => s._id === currentSection)) {
        console.log('Current section not available, clearing selection');
        if (editingItem) {
          setEditFormData(prev => ({ ...prev, assignSection: '' }));
        } else {
          setFormData(prev => ({ ...prev, assignSection: '' }));
        }
      }
    }
  }, [formData.assignBranch, editFormData.assignBranch, sections, editingItem, formData.assignSection, editFormData.assignSection]);

  // Fetch subcategories when category changes (for both create and edit modes)
  useEffect(() => {
    const currentCategory = editingItem ? editFormData.category : formData.itemCategory;
    if (currentCategory) {
      fetchSubCategoriesForCategory(currentCategory);
    } else {
      setSubCategories([]);
    }
  }, [formData.itemCategory, editFormData.category, editingItem]);

  const fetchSubCategoriesForCategory = async (categoryId) => {
    try {
      const token = localStorage.getItem('token');
      const headers = { Authorization: `Bearer ${token}` };
      
      const response = await axios.get(`${backend_url}/item-categories/subcategories/${categoryId}`, { headers });
      setSubCategories(response.data || []);
    } catch (error) {
      console.error('Error fetching subcategories:', error);
      setSubCategories([]);
    }
  };

  const handleInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    
      if (name === 'assignBranch') {
      // Handle checkbox for branches
      const branchId = value;
        setFormData(prev => ({
          ...prev,
        assignBranch: checked 
          ? [...prev.assignBranch, branchId]
          : prev.assignBranch.filter(id => id !== branchId)
      }));
    } else {
      setFormData(prev => ({
        ...prev,
        [name]: type === 'checkbox' ? checked : value
      }));
    }
  };

  // Removed unused handleCategorySelect function

  const handleSubmit = async (e) => {
    e.preventDefault();
    
    // Use the appropriate data based on edit mode
    const currentData = editingItem ? editFormData : formData;
    
    // Client-side validation
    if (!currentData.nameEn || !currentData.category || !currentData.unit || !currentData.subCategory) {
      alert('Please fill in all required fields: Item Name, Category, Unit, and Sub Category');
      return;
    }
    
    try {
      const token = localStorage.getItem('token');
      const headers = { Authorization: `Bearer ${token}` };
      
      const itemData = {
        nameEn: currentData.nameEn, // Backend expects nameEn
        category: currentData.category,
        subCategory: currentData.subCategory,
        baseUnit: currentData.unit, // Backend expects baseUnit
        unit: currentData.unit,
        assignBranch: currentData.assignBranch || [],
        assignSection: currentData.assignSection || null,
        assignBrand: currentData.assignBrand || null
      };

      console.log('Submitting item data:', itemData);

      if (editingItem) {
        const response = await axios.put(`${backend_url}/items/${editingItem._id}`, itemData, { headers });
        console.log('Item updated successfully:', response.data);
        alert('Item updated successfully!');
      } else {
        const response = await axios.post(`${backend_url}/items`, itemData, { headers });
        console.log('Item created successfully:', response.data);
        alert('Item created successfully!');
      }

      // Reset form
      setFormData({
        itemCode: '',
        itemName: '',
        itemCategory: '',
        subCategory: '',
        unit: '',
        assignBranch: [],
        assignSection: '',
        assignBrand: ''
      });
      
      setEditingItem(null);
      setEditFormData({});
      fetchItems(); // Refresh items list
    } catch (error) {
      console.error('Error saving item:', error);
      const errorMessage = error.response?.data?.message || error.response?.data?.error || 'Error saving item. Please try again.';
      alert(errorMessage);
    }
  };

  const handleDeleteItem = async (itemId) => {
    if (window.confirm('Are you sure you want to delete this item?')) {
      try {
        const token = localStorage.getItem('token');
        const headers = { Authorization: `Bearer ${token}` };
        
        await axios.delete(`${backend_url}/items/${itemId}`, { headers });
        alert('Item deleted successfully');
        fetchItems(); // Refresh the list
      } catch (error) {
        console.error('Error deleting item:', error);
        alert('Error deleting item. Please try again.');
      }
    }
  };

  const handleEditItem = (item) => {
    console.log('Editing item:', item);
    console.log('Item branches:', item.assignBranch);
    console.log('Item section:', item.assignSection);
    
    setEditingItem(item);
    setEditFormData({
      itemCode: item.itemCode || '',
      nameEn: item.nameEn || item.name || '',
      category: item.category?._id || '',
      subCategory: item.subCategory?._id || '',
      unit: item.unit?._id || item.baseUnit?._id || '',
      assignBranch: item.assignBranch?.map(b => b._id || b) || [],
      assignSection: item.assignSection?._id || '',
      assignBrand: item.assignBrand?._id || ''
    });
    
    console.log('Set edit form data:', {
      itemCode: item.itemCode || '',
      nameEn: item.nameEn || item.name || '',
      category: item.category?._id || '',
      subCategory: item.subCategory?._id || '',
      unit: item.unit?._id || item.baseUnit?._id || '',
      assignBranch: item.assignBranch?.map(b => b._id || b) || [],
      assignSection: item.assignSection?._id || '',
      assignBrand: item.assignBrand?._id || ''
    });
    
    // Fetch subcategories for the item's category
    if (item.category?._id) {
      fetchSubCategoriesForCategory(item.category._id);
    }
  };

  const handleCancelEdit = () => {
    setEditingItem(null);
    setEditFormData({});
    setFormData({
      itemCode: '',
      itemName: '',
      itemCategory: '',
      subCategory: '',
      unit: '',
      assignBranch: [],
      assignSection: '',
      assignBrand: ''
    });
  };

  const handleEditInputChange = (e) => {
    const { name, value, type, checked } = e.target;
    
    if (name === 'assignBranch') {
      // Handle checkbox for branches
      const branchId = value;
      setEditFormData(prev => ({
        ...prev,
        assignBranch: checked 
          ? [...(prev.assignBranch || []), branchId]
          : (prev.assignBranch || []).filter(id => id !== branchId)
      }));
    } else {
      setEditFormData(prev => ({
        ...prev,
        [name]: type === 'checkbox' ? checked : value
      }));
    }
  };

  const handleSaveEdit = async (itemId) => {
    try {
      // Client-side validation
      if (!editFormData.nameEn || !editFormData.category || !editFormData.unit || !editFormData.subCategory) {
        alert('Please fill in all required fields: Item Name, Category, Unit, and Sub Category');
        return;
      }
      
      const token = localStorage.getItem('token');
      const headers = { Authorization: `Bearer ${token}` };
      
      const itemData = {
        nameEn: editFormData.nameEn,
        category: editFormData.category,
        subCategory: editFormData.subCategory,
        baseUnit: editFormData.unit,
        unit: editFormData.unit,
        assignBranch: editFormData.assignBranch || [],
        assignSection: editFormData.assignSection || null,
        assignBrand: editFormData.assignBrand || null
      };

      console.log('Updating item with data:', itemData);

      const response = await axios.put(`${backend_url}/items/${itemId}`, itemData, { headers });
      console.log('Item updated successfully:', response.data);
      alert('Item updated successfully!');
      
      setEditingItem(null);
      setEditFormData({});
      fetchItems(); // Refresh items list
    } catch (error) {
      console.error('Error updating item:', error);
      const errorMessage = error.response?.data?.message || error.response?.data?.error || 'Error updating item. Please try again.';
      alert(errorMessage);
    }
  };



  if (loading) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50 flex items-center justify-center">
        <div className="text-center">
          <div className="loading-spinner rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Loading item creation...</p>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-purple-50">
      <div className="container mx-auto px-4 py-6 sm:px-6 lg:px-8">
        {/* Header */}
        <div className="mb-8">
          <div className="bg-gradient-to-r from-blue-600 to-purple-600 rounded-lg p-6 shadow-lg">
            <h1 className="text-2xl sm:text-3xl font-bold text-white mb-2 flex items-center">
              <svg className="w-8 h-8 mr-3" fill="currentColor" viewBox="0 0 20 20">
                <path fillRule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clipRule="evenodd" />
              </svg>
              {editingItem ? 'Edit Item' : 'Create New Item'}
            </h1>
            <p className="text-blue-100">Manage your inventory items with ease</p>
          </div>
        </div>

        <div className="modern-card p-6">

          <form onSubmit={handleSubmit} className="space-y-6">
          {/* Item Code */}
          <div className="grid grid-cols-3 gap-4 items-center">
            <div className="font-medium text-gray-700">Item Code:</div>
            <div className="col-span-2">
              <input
                type="text"
                name="itemCode"
                value={editingItem ? (editFormData.itemCode || 'Auto-generated by system') : 'Auto-generated by system'}
                className="w-full px-3 py-2 border border-gray-300 rounded-md bg-gray-100 text-gray-600"
                placeholder="Auto-generated by system"
                readOnly
                disabled
              />
            </div>
          </div>

          {/* Item Name */}
          <div className="grid grid-cols-3 gap-4 items-center">
            <div className="font-medium text-gray-700">Item Name:</div>
            <div className="col-span-2">
              <input
                type="text"
                name="itemName"
                value={editingItem ? editFormData.nameEn : formData.itemName}
                onChange={editingItem ? handleEditInputChange : handleInputChange}
                className="modern-input w-full"
                placeholder="Enter item name"
                required
              />
            </div>
          </div>

            {/* Item Category - Dropdown Only */}
          <div className="grid grid-cols-3 gap-4 items-center">
            <div className="font-medium text-gray-700">Item Category:</div>
              <div className="col-span-2">
                <select
                  name="itemCategory"
                  value={editingItem ? editFormData.category : formData.itemCategory}
                  onChange={editingItem ? handleEditInputChange : handleInputChange}
                  className="modern-select w-full"
                required
                >
                  <option value="">Select Category</option>
                  {categories.map((category) => (
                    <option key={category._id} value={category._id}>
                        {category.nameEn || category.name}
                    </option>
                  ))}
                </select>
            </div>
          </div>

          {/* Sub Category */}
          <div className="grid grid-cols-3 gap-4 items-center">
            <div className="font-medium text-gray-700">Sub Category:</div>
            <div className="col-span-2">
              <select
                name="subCategory"
                value={editingItem ? editFormData.subCategory : formData.subCategory}
                onChange={editingItem ? handleEditInputChange : handleInputChange}
                className="modern-select w-full"
                disabled={editingItem ? !editFormData.category : !formData.itemCategory}
              >
                <option value="">Select Sub Category</option>
                {subCategories.map((subCategory) => (
                  <option key={subCategory._id} value={subCategory._id}>
                    {subCategory.nameEn || subCategory.name}
                  </option>
                ))}
              </select>
              {(editingItem ? !editFormData.category : !formData.itemCategory) && (
                <p className="text-sm text-gray-500 mt-1">Please select a category first</p>
              )}
              {(editingItem ? editFormData.category : formData.itemCategory) && subCategories.length === 0 && (
                <p className="text-sm text-gray-500 mt-1">No sub-categories available for this category</p>
              )}
            </div>
          </div>

          {/* Unit */}
          <div className="grid grid-cols-3 gap-4 items-center">
            <div className="font-medium text-gray-700">Unit:</div>
            <div className="col-span-2">
              <select
                name="unit"
                value={editingItem ? editFormData.unit : formData.unit}
                onChange={editingItem ? handleEditInputChange : handleInputChange}
                className="modern-select w-full"
                required
              >
                <option value="">Select Unit</option>
                {units.map((unit) => (
                  <option key={unit._id} value={unit._id}>
                    {unit.name} ({unit.symbol})
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Assign Brand */}
          <div className="grid grid-cols-3 gap-4 items-center">
            <div className="font-medium text-gray-700">Assign Brand:</div>
            <div className="col-span-2">
              <select
                name="assignBrand"
                value={editingItem ? editFormData.assignBrand : formData.assignBrand}
                onChange={editingItem ? handleEditInputChange : handleInputChange}
                className="modern-select w-full"
              >
                <option value="">Select Brand</option>
                {brands.map((brand) => (
                  <option key={brand._id} value={brand._id}>
                    {brand.nameEn} {brand.nameAr && `(${brand.nameAr})`}
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Assign Branch */}
          <div className="grid grid-cols-3 gap-4 items-start">
            <div className="font-medium text-gray-700">Assign Branch:</div>
            <div className="col-span-2">
              <div className="space-y-2 max-h-40 overflow-y-auto border border-gray-300 rounded-md p-3">
                {branches.map((branch) => (
                  <label key={branch._id} className="flex items-center space-x-2">
                    <input
                      type="checkbox"
                      name="assignBranch"
                      value={branch._id}
                      checked={editingItem ? editFormData.assignBranch?.includes(branch._id) : formData.assignBranch.includes(branch._id)}
                      onChange={editingItem ? handleEditInputChange : handleInputChange}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                    <span className="text-sm text-gray-700">{branch.name}</span>
                  </label>
                ))}
              </div>
            </div>
          </div>

          {/* Assign Section */}
          <div className="grid grid-cols-3 gap-4 items-center">
            <div className="font-medium text-gray-700">Assign Section:</div>
            <div className="col-span-2">
              <select
                name="assignSection"
                value={editingItem ? editFormData.assignSection : formData.assignSection}
                onChange={editingItem ? handleEditInputChange : handleInputChange}
                className="w-full px-3 py-2 border border-gray-300 rounded-md"
                disabled={editingItem ? (editFormData.assignBranch?.length === 0) : (formData.assignBranch.length === 0)}
              >
                <option value="">
                  {(editingItem ? editFormData.assignBranch?.length === 0 : formData.assignBranch.length === 0) ? 'Select Branch First' : 'Select Section'}
                </option>
                {filteredSections.map((section) => (
                  <option key={section._id} value={section._id}>
                    {section.name}
                  </option>
                ))}
              </select>
              {(editingItem ? editFormData.assignBranch?.length === 0 : formData.assignBranch.length === 0) && (
                <p className="text-sm text-gray-500 mt-1">Please select at least one branch first</p>
              )}
              {(editingItem ? editFormData.assignBranch?.length > 0 : formData.assignBranch.length > 0) && filteredSections.length === 0 && (
                <p className="text-sm text-gray-500 mt-1">No sections available for selected branches</p>
              )}
            </div>
          </div>

            {/* Submit Buttons */}
            <div className="flex justify-end space-x-3 mt-6">
              {editingItem && (
                <button 
                  type="button"
                  onClick={handleCancelEdit}
                  className="px-6 py-2 bg-gray-500 text-white rounded-md hover:bg-gray-600 transition-colors font-medium"
                >
                  Cancel Edit
                </button>
              )}
            <button 
              type="submit"
                className="px-6 py-2 bg-green-500 text-white rounded-md hover:bg-green-600 transition-colors font-medium"
            >
                {editingItem ? 'Update Item' : 'Create Item'}
            </button>
          </div>
        </form>

        {/* Items List Section */}
        <div className="mt-8">
          <div className="border-t border-gray-200 pt-6">
              <h2 className="text-xl font-semibold text-gray-900 mb-4 flex items-center">
                <svg className="w-6 h-6 mr-2 text-blue-600" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M3 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1zm0 4a1 1 0 011-1h12a1 1 0 110 2H4a1 1 0 01-1-1z" clipRule="evenodd" />
                </svg>
                Existing Items
              </h2>
            
            {itemsLoading ? (
              <div className="flex items-center justify-center py-8">
                  <div className="loading-spinner rounded-full h-8 w-8 border-b-2 border-blue-500"></div>
                  <span className="ml-2 text-gray-600">Loading items...</span>
              </div>
            ) : (
                <div className="modern-card overflow-hidden">
                {/* Mobile Cards View */}
                <div className="block sm:hidden">
                  {items.map((item) => (
                    <div key={item._id} className="border-b border-gray-200 p-4 hover:bg-gray-50">
                      <div className="flex justify-between items-start mb-3">
                        <div>
                          <h3 className="font-medium text-gray-900">{item.nameEn}</h3>
                          <p className="text-sm text-gray-500">{item.itemCode}</p>
                        </div>
                        <div className="flex space-x-2">
                          <button
                            onClick={() => handleEditItem(item)}
                              className="px-2 py-1 text-xs bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors font-medium"
                          >
                            Edit
                          </button>
                          <button
                            onClick={() => handleDeleteItem(item._id)}
                              className="px-2 py-1 text-xs bg-red-500 text-white rounded hover:bg-red-600 transition-colors font-medium"
                          >
                            Delete
                          </button>
                        </div>
                      </div>
                      <div className="grid grid-cols-2 gap-2 text-sm">
                        <div>
                          <span className="text-gray-500">Category:</span>
                          <span className="ml-1 text-gray-900">{item.category?.nameEn || '-'}</span>
                        </div>
                        <div>
                          <span className="text-gray-500">Sub Category:</span>
                          <span className="ml-1 text-gray-900">
                            {item.subCategory?.nameEn || item.subCategory?.name || (item.subCategory === item.category ? '-' : item.subCategory) || '-'}
                          </span>
                        </div>
                          <div>
                            <span className="text-gray-500">Section:</span>
                            <span className="ml-1 text-gray-900">{item.assignSection?.nameEn || item.assignSection?.name || '-'}</span>
                        </div>
                        <div>
                          <span className="text-gray-500">Unit:</span>
                          <span className="ml-1 text-gray-900">{item.unit?.name || item.baseUnit?.name || '-'}</span>
                        </div>
                        <div>
                          <span className="text-gray-500">Brand:</span>
                          <span className="ml-1 text-gray-900">{item.assignBrand?.nameEn || '-'}</span>
                        </div>
                          <div>
                            <span className="text-gray-500">Branch:</span>
                            <span className="ml-1 text-gray-900">
                              {Array.isArray(item.assignBranch) 
                                ? item.assignBranch.map(branch => branch.name).join(', ') || '-'
                                : item.assignBranch?.name || '-'}
                            </span>
                          </div>
                      </div>
                    </div>
                  ))}
                  {items.length === 0 && (
                    <div className="text-center py-8">
                      <p className="text-gray-500">No items found. Create your first item above!</p>
                    </div>
                  )}
                </div>

                {/* Desktop Table View */}
                <div className="hidden sm:block overflow-x-auto">
                    <table className="modern-table min-w-full">
                      <thead className="bg-gradient-to-r from-blue-600 to-purple-600">
                      <tr>
                        <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                          Item Code
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                          Name (English)
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                          Category
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                          Sub Category
                        </th>
                          <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                            Section
                          </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                          Unit
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                          Brand
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                          Branch
                        </th>
                        <th className="px-6 py-3 text-left text-xs font-medium text-white uppercase tracking-wider">
                          Actions
                        </th>
                      </tr>
                    </thead>
                    <tbody className="bg-white divide-y divide-gray-200">
                      {items.map((item) => (
                          <tr key={item._id} className="hover:bg-blue-50 transition-colors duration-200 border-b border-gray-100">
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                            {item.itemCode}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {editingItem === item._id ? (
                              <input
                                type="text"
                                value={editFormData.nameEn || ''}
                                onChange={(e) => handleEditInputChange({ target: { name: 'nameEn', value: e.target.value } })}
                                className="w-full px-2 py-1 border border-gray-300 rounded"
                              />
                            ) : (
                              item.nameEn
                            )}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {editingItem === item._id ? (
                              <select
                                value={editFormData.category || ''}
                                onChange={(e) => handleEditInputChange({ target: { name: 'category', value: e.target.value } })}
                                className="w-full px-2 py-1 border border-gray-300 rounded"
                              >
                                <option value="">Select Category</option>
                                {categories.map((category) => (
                                  <option key={category._id} value={category._id}>
                                    {category.nameEn || category.name}
                                  </option>
                                ))}
                              </select>
                            ) : (
                              item.category?.nameEn || '-'
                            )}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {editingItem === item._id ? (
                              <select
                                value={editFormData.subCategory || ''}
                                onChange={(e) => handleEditInputChange({ target: { name: 'subCategory', value: e.target.value } })}
                                className="w-full px-2 py-1 border border-gray-300 rounded"
                                disabled={!editFormData.category}
                              >
                                <option value="">Select Sub Category</option>
                                  {(itemSubCategories[item._id] || []).map((subCategory) => (
                                  <option key={subCategory._id} value={subCategory._id}>
                                    {subCategory.nameEn || subCategory.name}
                                  </option>
                                ))}
                              </select>
                            ) : (
                              item.subCategory?.nameEn || item.subCategory?.name || (item.subCategory === item.category ? '-' : item.subCategory) || '-'
                            )}
                          </td>
                            <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                              {editingItem === item._id ? (
                                <select
                                  value={editFormData.assignSection || ''}
                                  onChange={(e) => handleEditInputChange({ target: { name: 'assignSection', value: e.target.value } })}
                                  className="w-full px-2 py-1 border border-gray-300 rounded"
                                >
                                  <option value="">Select Section</option>
                                  {filteredSections.map((section) => (
                                    <option key={section._id} value={section._id}>
                                      {section.nameEn || section.name}
                                    </option>
                                  ))}
                                </select>
                              ) : (
                                item.assignSection?.nameEn || item.assignSection?.name || '-'
                            )}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {editingItem === item._id ? (
                              <select
                                value={editFormData.unit || ''}
                                onChange={(e) => handleEditInputChange({ target: { name: 'unit', value: e.target.value } })}
                                className="w-full px-2 py-1 border border-gray-300 rounded"
                              >
                                <option value="">Select Unit</option>
                                {units.map((unit) => (
                                  <option key={unit._id} value={unit._id}>
                                    {unit.name} ({unit.symbol})
                                  </option>
                                ))}
                              </select>
                            ) : (
                              item.unit?.name || item.baseUnit?.name || '-'
                            )}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {editingItem === item._id ? (
                              <select
                                value={editFormData.assignBrand || ''}
                                onChange={(e) => handleEditInputChange({ target: { name: 'assignBrand', value: e.target.value } })}
                                className="w-full px-2 py-1 border border-gray-300 rounded"
                              >
                                <option value="">Select Brand</option>
                                {brands.map((brand) => (
                                  <option key={brand._id} value={brand._id}>
                                    {brand.nameEn} {brand.nameAr && `(${brand.nameAr})`}
                                  </option>
                                ))}
                              </select>
                            ) : (
                              item.assignBrand?.nameEn || '-'
                            )}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                            {editingItem === item._id ? (
                              <div className="space-y-1">
                                {branches.map((branch) => (
                                  <label key={branch._id} className="flex items-center">
                                    <input
                                      type="checkbox"
                                      checked={editFormData.assignBranch?.includes(branch._id) || false}
                                      onChange={(e) => {
                                        const newBranches = e.target.checked
                                          ? [...(editFormData.assignBranch || []), branch._id]
                                          : (editFormData.assignBranch || []).filter(id => id !== branch._id);
                                        handleEditInputChange({ target: { name: 'assignBranch', value: newBranches } });
                                      }}
                                      className="mr-2"
                                    />
                                    {branch.name}
                                  </label>
                                ))}
                              </div>
                            ) : (
                              // Display branches - handle both single and multiple
                              Array.isArray(item.assignBranch) 
                                ? item.assignBranch.map(branch => branch.name).join(', ') || '-'
                                : item.assignBranch?.name || '-'
                            )}
                          </td>
                          <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                            {editingItem === item._id ? (
                              <div className="flex space-x-2">
                                <button
                                  onClick={() => handleSaveEdit(item._id)}
                                    className="px-2 py-1 text-xs bg-green-500 text-white rounded hover:bg-green-600 transition-colors font-medium"
                                >
                                  Save
                                </button>
                                <button
                                  onClick={handleCancelEdit}
                                    className="px-2 py-1 text-xs bg-gray-500 text-white rounded hover:bg-gray-600 transition-colors font-medium"
                                >
                                  Cancel
                                </button>
                              </div>
                            ) : (
                              <div className="flex space-x-2">
                                <button
                                  onClick={() => handleEditItem(item)}
                                    className="px-2 py-1 text-xs bg-blue-500 text-white rounded hover:bg-blue-600 transition-colors font-medium"
                                >
                                  Edit
                                </button>
                                <button
                                  onClick={() => handleDeleteItem(item._id)}
                                    className="px-2 py-1 text-xs bg-red-500 text-white rounded hover:bg-red-600 transition-colors font-medium"
                                >
                                  Delete
                                </button>
                              </div>
                            )}
                          </td>
                        </tr>
                      ))}
                    </tbody>
                  </table>
                </div>
                
                {items.length === 0 && (
                  <div className="text-center py-8">
                    <p className="text-gray-500">No items found. Create your first item above!</p>
                  </div>
                )}
              </div>
            )}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default CreateItem; 